<project default="build">

  <!--Set up some properties that will be used throughout the build script-->
  <property name = "term" value="14wi"/>
  <property name = "course" value="cse331"/>

  <property environment="env"/>

  <property name="checkers" value="${env.CHECKERS}" />

  <!-- On Mac/Linux, use the javac shell script; on Windows, use javac.bat -->
  <condition property="cfJavac" value="javac.bat" else="javac">
    <os family="windows" />
  </condition>

  <property name = "base" location = '..'/>
  <property name = "src" location = '.'/>
  <property name = "dest" location = "${base}/bin"/>
  <property name = "docdest" location = "${base}/doc"/>
  <property name = "build.compiler" value = "javac1.7"/>
  <property name="java.api"
            value="http://docs.oracle.com/javase/7/docs/api" />
  <property name="junit.api"
            value="http://junit.sourceforge.net/javadoc/" />
  <!-- set up classpaths -->
  <property name="taglet.path" value="${base}/lib/javadoc331.jar" />
  <condition property="extra.classpath" value="">
   <not>
    <isset property="extra.classpath" />
   </not>
  </condition>

  <path id = "common.classpath">
    <pathelement location = "${dest}"/>
    <pathelement path="${extra.classpath}" />
    <fileset    dir="${base}/lib">
      <include name="*.jar" />
    </fileset>
  </path>
  
  <!-- load the if, propertyregex tasks -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"
           classpathref="common.classpath" />

  <!-- load machine-specific properties from ${src}/local.properties. If it doesn't
       exists, first create such a file with default properties for IWS machines-->
  <if>
    <not>
      <available file="${src}/local.properties"/>
    </not>
    <then>
      <echo message="Generating default configuration in local.properties"/>
      <touch file="${src}/local.properties"/>
      <propertyfile file="${src}/local.properties">
        <entry operation="+" key="javac.location" value="/usr/bin/javac"/>
      </propertyfile>
    </then>
  </if>
  <property file="${src}/local.properties"/>

  <target name="help">
    <echo>cse331 ant targets:

      build: build the code for this hw

      doc: generate api documentation for this hw

      test: run both SpecificationTests.java and ImplementationTests.java
      as JUnit tests.

      gui.test: run SpecificationTests.java and ImplementationTests.java
      in the graphical JUnit mode.

      gui.test -Duse.test=[classname]: Run a particular test in GUI mode

      daikon: runs all tests through Daikon.  See
      http://pag.csail.mit.edu/daikon/ for more information about Daikon.

      nocheck: disables the Nullness Checker. This allows you to debug problems
      independently of running the checker.

      check-nullness: runs the Nullness Checker on all assignments to
      detect null pointer dereferences.  See
      http://types.cs.washington.edu/checker-framework/current/checkers-manual.html for more
      information.

      validate: ensure all required files are in SVN, and that a clean
      SVN checkout compiles and passes all tests.  Use only on attu
      for best results.

      run -Dprogram=[classname]: runs the given java program (use the
      full name, like hw0.HelloWorld)

      clean: deletes all .class files and generated documentation for this hw.

      help: displays this message
    </echo>
  </target>

  <!--Call cleancopy.check for all the required files (listed in
  required.properties) -->
  <target name="cleancopy" >
    <echo message="Hw directory: ${hw}"/>
    <if>
      <not>
        <available file="${hw}/required.properties"/>
      </not>
      <then>
        <fail message="You seem to have deleted file: ${hw}/required.properties"/>
      </then>
    </if>
    <property file="${hw}/required.properties"/>

    <foreach list="${required.files}"
             trim="true"
             target="cleancopy.check"
             param="required.file"/>
  </target>

  <!--Make sure required.file is there.  If not, fail.-->
  <target name="cleancopy.check">
    <available file="${required.file}"
               property="file.present"
               value="yes"
               filepath="${hw}"/>
    <if>
      <equals arg1="${file.present}" arg2="yes"/>
      <then>
        <echo message="Found required file ${required.file}"/>
      </then>
      <else>
        <fail message="Could not find required file: ${required.file}"/>
      </else>
    </if>
  </target>


  <target name = "validate"
          description = "Does a build and test on a clean SVN checkout.">
    <echo>Validate checks out a fresh copy of the hw, checks for the
      presence of required files, and runs all your tests to make sure
      they pass.  This target can only run on the attu IWS machine.

      Note: the test reports will be generated under the scratch
      directory the validate target creates.
    </echo>

    <!-- proported to be the most cross-platform way... since Windows and Linux use different env vars -->
    <exec executable="hostname" outputproperty="found.hostname"/>
    <propertyregex property="host.is.attu"
                   input="${found.hostname}"
                   regexp="^attu[0-9]\.cs.washington.edu"
                   select="\0"/>

    <fail unless="host.is.attu"
          message="Could not validate; the `validate' target must be run on attu.cs.washington.edu"/>

    <property name = "validate.upone" location="${basedir}/.."/>
    <property name = "validate.scratch" location="${validate.upone}/scratch"/>
    <delete dir="${validate.scratch}" quiet="true"/>
    <mkdir dir="${validate.scratch}"/>
    <property name = "repo.location" value = "/projects/instr/${term}/${course}/${env.USER}/REPOS"/>
    <echo message="${repo.location}"/>
    <exec executable="svn"
          dir="${validate.scratch}">
      <arg line="export file://${repo.location}/cse331"/>
    </exec>

    <exec executable="ant"
          dir="${validate.scratch}/cse331/src/${hwname}"
          failonerror="true" >
      <arg value="cleancopy"/>
    </exec>
    <exec executable="ant"
          dir="${validate.scratch}/cse331/src/${hwname}"
          failonerror="true">
      <!-- necessary since the sub-buildfile does not run from a working copy directory,
           and works because we already checked that we're on attu (real env.USER). Also,
           set compiler args so that it fails on the first warning. -->
      <arg line="-Duser.csenetid=${env.USER} -Dcompiler.args='' test.strict"/>
    </exec>

    <delete dir="${validate.scratch}" quiet="true"/>
  </target>

  <target name = "exclusive.build" unless = "also.compile">
    <available file = "${javac.location}"
               property="build.fork"
               value="yes"/>
    <echo message = "Compiling all files, except a few specified for exclusion."/>

    <property name="compile.source" value="${hw}"/>
    <property name="compile.include" value=""/>
    <property name="compile.exclude" value=".svn,*.package.html,${exclude.compile},${staff.nocomp}"/>
    <!-- Disable nullness checker enforcement while still allowing students to run check-nullness -->
    <!-- <antcall target="check-nullness"/> -->
    <antcall target="compile.impl"/>
  </target>

  <target name = "single.build" unless = "also.compile">
    <available file = "${javac.location}"
               property="build.fork"
               value="yes"/>
    <echo message = "This hw is independent; building only this one."/>

    <property name="compile.source" value="${hw}"/>
    <property name="compile.include" value=""/>
    <property name="compile.exclude" value=".svn,*/package.html,${staff.nocomp}"/>

    <!-- Disable nullness checker enforcement while still allowing students to run check-nullness -->
    <!-- <antcall target="check-nullness"/> -->
    <antcall target="compile.impl"/>
  </target>

  <target name = "total.build">
    <available file = "${javac.location}"
               property="build.fork"
               value="yes"/>
    <echo message = "Building all hws"/>

    <property name="compile.source" value="${src}"/>
    <property name="compile.include" value=""/>
    <property name="compile.exclude" value=".svn,*/package.html,${staff.nocomp}"/>

    <!-- Only run the nullness checker when desired -->
    <if>
      <isset property = "checker.enabled" />
    <then>
      <antcall target="check-nullness"/>
    </then>
    </if>
    <antcall target="compile.impl"/>
  </target>

  <target name = "multi.build" if = "also.compile">
    <available file = "${javac.location}"
               property="build.fork"
               value="yes"/>
    <echo message = "This hw depends on others; building all associated hws now."/>
    <echo message="${hwname}/**/*.java, ${also.compile}"/>

    <property name="compile.source" value="${src}"/>
    <property name="compile.include" value="${also.compile}, ${hwname}/**/*.java"/>
    <property name="compile.exclude" value=".svn,*/package.html,${staff.nocomp}"/>

    <!-- Disable nullness checker enforcement while still allowing students to run check-nullness -->
    <!-- <antcall target="check-nullness"/>  -->
    <antcall target="compile.impl"/>
  </target>

  <target name = "nocheck" description = "Disables the nullness checker (say, if your setup cannot run it)">
    <property name="checker.disabled" value="yes"/>
  </target>

  <target name = "check-nullness" unless = "checker.disabled"
    description="Run the nullness checker over all assignments (when called directly)."
    depends="clean">
    <!-- note: even if the checker succeeds (build succeeds), we remove
         the generated class files.  this is to avoid maintaining two
         different build targets that generate the same files. -->

    <!-- this target is invoked in one of two ways:
      * if invoked directly, it causes the total.build target to run before forcing the
      the checkers framework to be run. The total.build target sets several properties
      that control what sources are compiled, and does its own call to this target.
      * if called indirectly by a *.build target, it runs the checkers framework.

      Regardless of invocation method, this target will automatically
      exclude any files found in a directory path containing 'test'. This
      is because checking nullness for tests is (in general) not a
      productive use of time.
    -->
    <if>
      <not>
        <isset property="compile.source"/>
      </not>
      <then>
        <property name="checker.enabled" value="value_unused" />
        <antcall target="total.build"/>
      </then>
      <else>
        <echo message = "The Nullness Checker is running on all files necessary for the build."/>
        <!--
          Hack for Windows:  use a java ant task rather than javac because
          ant/windows will not resolve javac.bat into an executable.
        -->
        <presetdef name="jsr308.javac">
          <java fork="yes" jar="${checkers}/binary/checkers.jar" >
            <!-- JSR308 related compiler arguments -->
            <arg value="-version"/>
          </java>
        </presetdef>

        <!--default value for compiler.args, if not specified-->
        <if>
          <not>
            <isset property="compiler.args"/>
          </not>
          <then>
            <property name="compiler.args" value=""/>
            <!-- To make the nullness checker emit warnings by default, uncomment: -->
            <!--property name="compiler.args" value="-Awarns -Xmaxwarns 10000"/-->
            </then>
        </if>
        
        <!-- Define source files to compile -->
        <fileset dir="${compile.source}" 
                 id="javacSrc" 
                 includes="${compile.include}"
                 excludes="${compile.exclude} **/test/** ">
          <filename regex = ".java$" />
        </fileset>     

        <!-- See Hack notice near the presetdef of jsr308.java, since we are using
             a java task we need to convert the fileset and path variables into
             property strings using string convert -->
        <pathconvert property="srcFiles"  refid="javacSrc" pathsep=" " />
        <pathconvert property="classPath" refid="common.classpath"     />

        <jsr308.javac failonerror="true">
          <arg value="-g"/> <!-- implies DEBUG==true -->
          <arg line="-d ${dest}"/>
          <arg line="-classpath ${classPath}" />
          <arg line="-processor checkers.nullness.NullnessChecker"/>
          <arg line="${compiler.args}"/>
          <arg value="-AskipUses=^(java\.awt\.|javax\.swing\.)"/>
          <arg value="-J-Djsr308_imports=checkers.nullness.quals.*"/>
          <arg value="-Xlint"/>
          <arg line="${srcFiles}" />
        </jsr308.javac>

        <!-- force removal of the checker-generated classfiles -->
        <antcall target = "clean"/>
      </else>
    </if>
  </target>

  <target name = "compile.impl"
          description="Performs the actual compilation of java source files into class files.">
    <!-- copy any diff tests (run by ScriptFileTests, named *.expected and *.test)
         to the equivalent directory in the compile dest directory. Only if
         property is set. -->
    <if>
      <isset property="copy.difftests"/>
      <then>
        <copy todir="${dest}/">
          <fileset dir="${src}/">
            <include name="**/*.expected"/>
            <include name="**/*.test"/>
          </fileset>
        </copy>
      </then>
    </if>
    <!-- copy any images to the bin directory, in case they are needed (mainly by 11wi PS7) -->
    <copy todir="${dest}/">
      <fileset dir="${src}/">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
      </fileset>
    </copy>

    <!--default value for compiler.args, if not specified-->
    <if>
      <not>
        <isset property="compiler.args"/>
      </not>
      <then>
        <property name="compiler.args" value="-Awarns -Xmaxwarns 10000"/>
      </then>
    </if>

    <!-- it is controlled by the properties compile.{source,include,exclude}. More complicated
         invocations of javac need to define their own javac call -->
    <javac srcdir="${compile.source}"
           destdir="${dest}"
           debug="true"
           fork="${build.fork}"
           executable="${javac.location}"
           includes="${compile.include}"
           excludes="${compile.exclude}"
           includeantruntime="false">
        <compilerarg line="${compiler.args}"/>
        <compilerarg value="-Xlint"/>
        <classpath refid = "common.classpath"/>
    </javac>
  </target>

  <target name = "build"
          description="Compiles the assignment">
    <!-- used by compile.impl and check-nullness -->
    <available file = "${javac.location}"
               property="build.fork"
               value="yes"/>
    <antcall target = "single.build"/>
    <antcall target = "multi.build"/>
  </target>

  <target name = "clean" description="Deletes most of the generated files">
    <delete>
      <fileset dir = "${hw}"
               casesensitive = "yes"
               includes="**/daikon*.dtrace.gz **/daikon*.inv.*">
      </fileset>
    </delete>
    <delete>
      <fileset dir="${dest}"
               casesensitive="yes"
               includes="**/*">
      </fileset>
    </delete>

    <delete dir = "${docdest}/${hwname}"/>
  </target>

  <target name = "doc" depends = "build"
          description = "Build all the Javadoc API documentation">
    <mkdir dir = "${docdest}"/>
    <javadoc sourcepath="${src}" destdir="${docdest}" linksource="yes">
      <classpath refid = "common.classpath"/>
      <link href="${java.api}" />
      <link href="${junit.api}" />
      <fileset dir="${basedir}"
       includes="${hwname}/**/*.java, ${also.compile}, ${staff.doc}"
       excludes="${staff.nodoc}" />
      <taglet name="javadoc331.RequiresTaglet" path="${taglet.path}" />
      <taglet name="javadoc331.EffectsTaglet" path="${taglet.path}" />
      <taglet name="javadoc331.ModifiesTaglet" path="${taglet.path}" />
      <taglet name="javadoc331.ReturnsTaglet" path="${taglet.path}" />
      <taglet name="javadoc331.SpecfieldTaglet" path="${taglet.path}" />
      <taglet name="javadoc331.DerivedfieldTaglet" path="${taglet.path}" />
    </javadoc>
  </target>

  <target name = "test.spec" depends = "build" unless = "no.tests">
    <mkdir dir = "${hw}/test/reports"/>

    <!-- Set the run directory to the project base. This way
      relative filenames are treated the same when the program
      is run through Ant or Eclipse. -->
    <junit printsummary="yes"
           dir="${base}"
           fork="on"
           failureproperty="test.spec.failed"
           forkmode="once">
      <classpath refid = "common.classpath"/>
      <test name="${hwname}.test.SpecificationTests"
            todir="${hw}/test/reports">
        <formatter type="plain"/>
      </test>
      <assertions>
        <enable/>
      </assertions>
    </junit>
  </target>

  <target name = "test.impl" depends = "build" unless = "no.tests">
    <mkdir dir = "${hw}/test/reports"/>

    <!-- Set the run directory to the project base. This way
      relative filenames are treated the same when the program
      is run through Ant or Eclipse. -->
    <junit printsummary="yes"
           dir="${base}"
           fork="on"
           failureproperty="test.impl.failed"
           forkmode="once">
      <classpath refid = "common.classpath"/>
      <test name="${hwname}.test.ImplementationTests"
            todir="${hw}/test/reports">
        <formatter type="plain"/>
      </test>
      <assertions>
        <enable/>
      </assertions>
    </junit>
  </target>

  <target name = "test" depends = "test.impl, test.spec"
          description="Run all standard tests on the code" unless = "no.tests">
    <echo message="Records of this testing can be found in ${basedir}/${hwname}/test/reports/"/>
  </target>

  <target name = "test.strict" depends = "test">
    <fail if="test.impl.failed"/>
    <fail if="test.spec.failed"/>
  </target>

  <target name = "gui.test.all" depends = "build" unless="use.test">
    <java classname="junit.swingui.TestRunner"
          fork="Yes"
          spawn="Yes"
          dir="${hw}/test/"
          classpathref="common.classpath">
      <arg value="${hwname}.test.ImplementationTests"/>
      <arg value="${hwname}.test.SpecificationTests"/>
      <assertions>
        <enable/>
      </assertions>
    </java>
  </target>

  <target name = "gui.test.one" depends = "build" if="use.test">
    <java classname="junit.swingui.TestRunner"
          fork="Yes"
          spawn="Yes"
          dir="${hw}/test/"
          classpathref="common.classpath">
      <arg value="${use.test}"/>
      <assertions>
        <enable/>
      </assertions>
    </java>
  </target>

  <target name="gui.test"
          description="Run tests using the JUnit GUI.  Optional parameter&#10;
                        use.test selects a particulart test; default runs all">
    <antcall target="gui.test.all"/>
    <antcall target="gui.test.one"/>
  </target>

  <!-- runs daikon on the student program.  Results are prefixed with
       ${hwname}.  The most interesting file is ${hwname}.inv.txt.
       Note these are in the assignment directory rather than tests -->
  <target name = "daikon" depends = "build"
          description="Runs daikon on the program.  Results are prefixed with the hw name">
    <java classname="daikon.Chicory"
          fork="yes"
          spawn="no"
          dir="${hw}"
          classpathref="common.classpath">
      <arg value="--ppt-omit-pattern=junit|^${hwname}.test"/>
      <arg value="--dtrace-file=daikon.dtrace.gz"/>
      <arg value="--daikon"/>
      <arg value="--daikon_args"/>
      <arg value="--config_option daikon.PptRelation.enable_object_user=false
            --no_text_output --config_option daikon.Daikon.progress_delay=-1"/>
      <arg value="org.junit.runner.JUnitCore"/>
      <arg value="${hwname}.test.SpecificationTests"/>
    </java>
    <java classname="daikon.PrintInvariants"
          fork="yes"
          spawn="no"
          classpathref="common.classpath"
          dir="${hw}"
          output="${hw}/daikon.inv.txt">
       <arg value="daikon.inv.gz"/>
    </java>
    <echo> "Results are in daikon.inv.txt" </echo>
  </target>


  <target name = "run" depends = "build" if="program"
          description="Runs the given program argument">
    <java classname="${program}"
          fork="Yes"
          spawn="Yes"
          dir="${hw}"
          classpathref="common.classpath"/>
      <assertions>
        <enable/>
      </assertions>
  </target>

  <target name = "all" depends = "build, test, doc"/>
</project>
